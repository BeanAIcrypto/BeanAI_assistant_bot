import logging
import os

from aiogram import Bot
from aiogram.types import ChatMember
from aiogram.utils.exceptions import ChatNotFound, Unauthorized
from src.keyboards.check_subscriptions_keyboard import (
    check_subscriptions_keyboard,
)


logger = logging.getLogger(__name__)

CHANNEL_ID = os.getenv("CHANNEL_ID")


async def check_subscription(user_id: int, bot: Bot) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –∏–Ω–∞—á–µ False.

    Raises:
        ChatNotFound: –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.
        Unauthorized: –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É.
        Exception: –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    try:
        if not CHANNEL_ID:
            logger.error(
                "CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
            )
            return False

        chat_member: ChatMember = await bot.get_chat_member(
            CHANNEL_ID, user_id
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ç–∞—Ç—É—Å {chat_member.status}.")
        if chat_member.status in ["member", "administrator", "creator"]:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.")
            return True
        else:
            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –°—Ç–∞—Ç—É—Å: {chat_member.status}"
            )
            return False

    except ChatNotFound:
        logger.error(
            "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHANNEL_ID –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª."
        )
        return False
    except Unauthorized:
        logger.error(
            "–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –±–æ—Ç–∞."
        )
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False


async def subscription(user_id: int, language: str, message, bot: Bot) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.

    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        language (str): –Ø–∑—ã–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.

    Returns:
        bool: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª, –∏–Ω–∞—á–µ False.

    Raises:
        Exception: –î–ª—è –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    try:
        logger.info(
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —è–∑—ã–∫–µ {language}"
        )

        if not await check_subscription(user_id, bot):
            sub_message = {
                "en": f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à <a href='{os.getenv('CHANNEL_LINK')}'>Telegram-–∫–∞–Ω–∞–ª</a> üòé",
                "en": f"Please subscribe to our <a href='{os.getenv('CHANNEL_LINK')}'>Telegram channel</a> üòé",
            }.get(language, "Please subscribe to our channel.")

            logger.info(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è."
            )
            await message.reply(
                sub_message,
                parse_mode="HTML",
                reply_markup=check_subscriptions_keyboard(language),
            )
            return False

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω.")
        return True
    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
        )
        return False
